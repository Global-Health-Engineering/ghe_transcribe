[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "ghe_transcribe"
description = "A tool to transcribe audio files with speaker diarization using Faster Whisper and Pyannote"
readme = "README.md"
requires-python = ">=3.10,<3.13"
license = "MIT"
authors = [
    {name = "Nicolo' Massari", email = "nmassari@ethz.ch"},
]
maintainers = [
    {name = "Nicolo' Massari", email = "nmassari@ethz.ch"},
]
keywords = ["transcription", "speech-to-text", "speaker-diarization", "whisper", "pyannote"]
classifiers = [
    "Development Status :: 4 - Beta",
    # "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dynamic = ["version"]
dependencies = [
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "typer>=0.9.0",
    "av>=11.0.0",
    "faster-whisper>=1.0.0",
    "pyannote.audio>=3.0.0",
    "PyYAML>=6.0",
    "ipywidgets>=8.0.0",
    "IPython>=8.0.0",
    "ipykernel>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
]
all = [
    "ghe_transcribe[dev]",
]

[project.scripts]
transcribe = "ghe_transcribe.core:app"

[project.urls]
"Homepage" = "https://github.com/Global-Health-Engineering/ghe_transcribe"
"Bug Reports" = "https://github.com/Global-Health-Engineering/ghe_transcribe/issues"
"Source" = "https://github.com/Global-Health-Engineering/ghe_transcribe"
"Documentation" = "https://github.com/Global-Health-Engineering/ghe_transcribe#readme"

[tool.setuptools]
packages = ["ghe_transcribe"]
package-dir = {"" = "src"}

[tool.setuptools_scm]
write_to = "src/ghe_transcribe/_version.py"
version_scheme = "release-branch-semver"
local_scheme = "node-and-date"

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "B905", # zip without explicit strict parameter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "B018"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]

# redundant pytest options
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
